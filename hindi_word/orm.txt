class Mobiles(models.Model):
    name=models.CharField(max_length=200,unique=True)
    price=models.PositiveIntegerField()
    brand=models.CharField(max_length=200)
    specs=models.CharField(max_length=200)
    display=models.CharField(max_length=200)


    orm query=====

    modelname.objects.create(fieldname="value",......)

    eg:
    from mobile.models import Mobiles
    Mobiles.objects.create(name="realme 15pro",price=25000,brand="realme",specs="8gb 256gb",display="LED")

    orm query for allrecords

qs=modelname.objects.all()
eg
qs=Mobiles.object.all()


orm query for selecting a particular object
qs=modelname.object.get()

orm query for filtering objects

qs=modelname.objects.filter(condition="")

eg qs=Mobiles.objects.filter(brand="samsung")


to filter less than
field lookup 
<= __lte
>=  __gte
<   __lt
>   __gt


qs=modelname.objects.filter(price__lte=50000)

qs=modelname.objects.exclude(element)
eg    
qs=Mobiles.objects.exclude(brand="samsung")


qeuery for deleting object

Modelname.object.filter(id=3).delete()

eg
qs=Mobiles.object.filter(id-3).delete()

orm query for updating an element

Mobiles.object.filter(id=1).update(price=23000,specs="18gb ram")


sorting element

qs=Modelname.objects.all().order_by("category")   ===ascending order
qs=Modelname.objects.all().order_by("-category")   ===desscending order


example  
qs=Mobiles.objects.all().order_by("price")


display a column 

qs=Modelname.objects.all().values_list("category",flat=True).distinct()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ distinct used for not repeating
example
qs=Mobiles.objects.all().values_list("brand",flat=True).distinct()
